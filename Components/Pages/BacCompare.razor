@page "/bac-compare"
@using projekt.Models
@using projekt.Services
@namespace projekt.Components.Pages
@inject CsvService CsvService
@rendermode InteractiveServer

<PageTitle>Compare BAC Results</PageTitle>

<div class="container">
    <h1 class="mb-4">Compare BAC Results</h1>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Select Years to Compare</h5>
                </div>
                <div class="card-body">
                    @if (!AvailableYears.Any())
                    {
                        <div class="alert alert-warning">No data files found.</div>
                    }
                    else
                    {
                        @foreach (var year in AvailableYears)
                        {
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox"
                                       id="year-@year" value="@year"
                                       checked="@SelectedYears.Contains(year)"
                                       @onchange="@(e => ToggleYearSelection(year, e.Value != null && (bool)e.Value))" />
                                <label class="form-check-label" for="year-@year">@year</label>
                            </div>
                        }

                        <div class="mt-3">
                            <button class="btn btn-primary" @onclick="LoadComparisonData"
                                    disabled="@(!SelectedYears.Any() || IsLoading)">
                                Compare Selected Years
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Comparison Options</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Comparison Type</label>
                        <select class="form-select" @bind="ComparisonType">
                            <option value="Overall">Overall Statistics</option>
                            <option value="Specialization">By Specialization</option>
                            <option value="County">By County</option>
                        </select>
                    </div>

                    @if (ComparisonType != "Overall")
                    {
                        <div class="mb-3">
                            <label class="form-label">Filter (optional)</label>
                            <input type="text" class="form-control" placeholder="Enter filter text..."
                                   @bind="FilterText" @bind:event="oninput" />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (IsLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (YearStats.Any())
    {
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Comparison Results</h5>
            </div>
            <div class="card-body">
                @if (ComparisonType == "Overall")
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Statistic</th>
                                    @foreach (var year in SelectedYears.OrderBy(y => y))
                                    {
                                        <th class="text-center">@year</th>
                                    }
                                    <th class="text-center">Change</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Total Students</td>
                                    @foreach (var year in SelectedYears.OrderBy(y => y))
                                    {
                                        <td class="text-center">@YearStats[year].TotalCount</td>
                                    }
                                    <td class="text-center">
                                        @GetChangeIndicator(YearStats[SelectedYears.Min()].TotalCount,
                                                 YearStats[SelectedYears.Max()].TotalCount)
                                    </td>
                                </tr>
                                <tr>
                                    <td>Pass Rate</td>
                                    @foreach (var year in SelectedYears.OrderBy(y => y))
                                    {
                                        <td class="text-center">@YearStats[year].PassRate.ToString("F1")%</td>
                                    }
                                    <td class="text-center">
                                        @GetChangeIndicator(YearStats[SelectedYears.Min()].PassRate,
                                                 YearStats[SelectedYears.Max()].PassRate)
                                    </td>
                                </tr>
                                <tr>
                                    <td>Average Score</td>
                                    @foreach (var year in SelectedYears.OrderBy(y => y))
                                    {
                                        <td class="text-center">@YearStats[year].AverageScore.ToString("F2")</td>
                                    }
                                    <td class="text-center">
                                        @GetChangeIndicator(YearStats[SelectedYears.Min()].AverageScore,
                                                 YearStats[SelectedYears.Max()].AverageScore)
                                    </td>
                                </tr>
                                <tr>
                                    <td>Romanian Average</td>
                                    @foreach (var year in SelectedYears.OrderBy(y => y))
                                    {
                                        <td class="text-center">@YearStats[year].RomanianAverage.ToString("F2")</td>
                                    }
                                    <td class="text-center">
                                        @GetChangeIndicator(YearStats[SelectedYears.Min()].RomanianAverage,
                                                 YearStats[SelectedYears.Max()].RomanianAverage)
                                    </td>
                                </tr>
                                <tr>
                                    <td>Mandatory Subject Average</td>
                                    @foreach (var year in SelectedYears.OrderBy(y => y))
                                    {
                                        <td class="text-center">@YearStats[year].MandatoryAverage.ToString("F2")</td>
                                    }
                                    <td class="text-center">
                                        @GetChangeIndicator(YearStats[SelectedYears.Min()].MandatoryAverage,
                                                 YearStats[SelectedYears.Max()].MandatoryAverage)
                                    </td>
                                </tr>
                                <tr>
                                    <td>Chosen Subject Average</td>
                                    @foreach (var year in SelectedYears.OrderBy(y => y))
                                    {
                                        <td class="text-center">@YearStats[year].ChosenAverage.ToString("F2")</td>
                                    }
                                    <td class="text-center">
                                        @GetChangeIndicator(YearStats[SelectedYears.Min()].ChosenAverage,
                                                 YearStats[SelectedYears.Max()].ChosenAverage)
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                }
                else if (ComparisonType == "Specialization")
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Specialization</th>
                                    @foreach (var year in SelectedYears.OrderBy(y => y))
                                    {
                                        <th class="text-center">@year Pass Rate</th>
                                        <th class="text-center">@year Average</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var specialization in GetFilteredSpecializations())
                                {
                                    <tr>
                                        <td>@specialization</td>
                                        @foreach (var year in SelectedYears.OrderBy(y => y))
                                        {
                                            var stats = GetSpecializationStats(year, specialization ?? "");
                                            <td class="text-center">@stats.PassRate.ToString("F1")%</td>
                                            <td class="text-center">@stats.AverageScore.ToString("F2")</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (ComparisonType == "County")
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>County</th>
                                    @foreach (var year in SelectedYears.OrderBy(y => y))
                                    {
                                        <th class="text-center">@year Pass Rate</th>
                                        <th class="text-center">@year Average</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var county in GetFilteredCounties())
                                {
                                    <tr>
                                        <td>@county</td>
                                        @foreach (var year in SelectedYears.OrderBy(y => y))
                                        {
                                            var stats = GetCountyStats(year, county ?? "");
                                            <td class="text-center">@stats.PassRate.ToString("F1")%</td>
                                            <td class="text-center">@stats.AverageScore.ToString("F2")</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<int> AvailableYears { get; set; } = new List<int>();
    private HashSet<int> SelectedYears { get; set; } = new HashSet<int>();
    private bool IsLoading { get; set; } = true;
    private string ComparisonType { get; set; } = "Overall";
    private string FilterText { get; set; } = "";

    // Dictionary to store results for each year
    private Dictionary<int, List<BacResult>> YearData { get; set; } = new Dictionary<int, List<BacResult>>();

    // Dictionary to store statistics for each year
    private Dictionary<int, YearStatistics> YearStats { get; set; } = new Dictionary<int, YearStatistics>();

    private class YearStatistics
    {
        public int TotalCount { get; set; }
        public int PassedCount { get; set; }
        public double PassRate => TotalCount > 0 ? (PassedCount * 100.0 / TotalCount) : 0;
        public double AverageScore { get; set; }
        public double RomanianAverage { get; set; }
        public double MandatoryAverage { get; set; }
        public double ChosenAverage { get; set; }

        // Dictionaries for detailed statistics
        public Dictionary<string, SpecializationStats> SpecializationStatistics { get; set; } = new Dictionary<string, SpecializationStats>();
        public Dictionary<string, CountyStats> CountyStatistics { get; set; } = new Dictionary<string, CountyStats>();
    }

    private class SpecializationStats
    {
        public int Count { get; set; }
        public int Passed { get; set; }
        public double PassRate => Count > 0 ? (Passed * 100.0 / Count) : 0;
        public double AverageScore { get; set; }
    }

    private class CountyStats
    {
        public int Count { get; set; }
        public int Passed { get; set; }
        public double PassRate => Count > 0 ? (Passed * 100.0 / Count) : 0;
        public double AverageScore { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        AvailableYears = await CsvService.GetAvailableYearsAsync();

        // Auto-select the two most recent years if available
        if (AvailableYears.Count >= 2)
        {
            var sortedYears = AvailableYears.OrderByDescending(y => y).Take(2).ToList();
            foreach (var year in sortedYears)
            {
                SelectedYears.Add(year);
            }

            await LoadComparisonData();
        }

        IsLoading = false;
    }

    private void ToggleYearSelection(int year, bool isSelected)
    {
        if (isSelected)
        {
            SelectedYears.Add(year);
        }
        else
        {
            SelectedYears.Remove(year);
        }
    }

    private async Task LoadComparisonData()
    {
        if (!SelectedYears.Any())
            return;

        IsLoading = true;
        YearData.Clear();
        YearStats.Clear();

        foreach (var year in SelectedYears)
        {
            var results = await CsvService.GetBacResultsForYearAsync(year);
            YearData[year] = results;

            // Calculate statistics for this year
            var stats = new YearStatistics
                {
                    TotalCount = results.Count,
                    PassedCount = results.Count(r => r.Passed == 1),
                    AverageScore = results.Any() ? results.Average(r => r.Average) : 0,
                    RomanianAverage = results.Any() ? results.Average(r => r.RomanianGradeFinal) : 0,
                    MandatoryAverage = results.Any() ? results.Average(r => r.MandatoryGradeFinal) : 0,
                    ChosenAverage = results.Any() ? results.Average(r => r.ChosenGradeFinal) : 0
                };

            // Calculate specialization statistics
            var specializationGroups = results
                .Where(r => !string.IsNullOrEmpty(r.Specialization))
                .GroupBy(r => r.Specialization);

            foreach (var group in specializationGroups)
            {
                stats.SpecializationStatistics[group.Key] = new SpecializationStats
                    {
                        Count = group.Count(),
                        Passed = group.Count(r => r.Passed == 1),
                        AverageScore = group.Average(r => r.Average)
                    };
            }

            // Calculate county statistics
            var countyGroups = results
                .Where(r => !string.IsNullOrEmpty(r.County))
                .GroupBy(r => r.County);

            foreach (var group in countyGroups)
            {
                stats.CountyStatistics[group.Key] = new CountyStats
                    {
                        Count = group.Count(),
                        Passed = group.Count(r => r.Passed == 1),
                        AverageScore = group.Average(r => r.Average)
                    };
            }

            YearStats[year] = stats;
        }

        IsLoading = false;
    }

    private string GetChangeIndicator(double startValue, double endValue)
    {
        var change = endValue - startValue;
        var percentChange = startValue != 0 ? (change / startValue) * 100 : 0;

        string indicator;

        if (Math.Abs(percentChange) < 1)
        {
            indicator = "→ No Change";
        }
        else if (change > 0)
        {
            indicator = $"↑ +{change:F2} ({percentChange:F1}%)";
        }
        else
        {
            indicator = $"↓ {change:F2} ({percentChange:F1}%)";
        }

        return indicator;
    }

    private IEnumerable<string> GetFilteredSpecializations()
    {
        // Collect all specializations across years
        var allSpecializations = new HashSet<string>();

        foreach (var year in SelectedYears)
        {
            if (YearStats.ContainsKey(year))
            {
                foreach (var spec in YearStats[year].SpecializationStatistics.Keys)
                {
                    allSpecializations.Add(spec);
                }
            }
        }

        // Filter by text if provided
        if (!string.IsNullOrEmpty(FilterText))
        {
            return allSpecializations
                .Where(s => s.Contains(FilterText, StringComparison.OrdinalIgnoreCase))
                .OrderBy(s => s);
        }

        return allSpecializations.OrderBy(s => s);
    }

    private IEnumerable<string> GetFilteredCounties()
    {
        // Collect all counties across years
        var allCounties = new HashSet<string>();

        foreach (var year in SelectedYears)
        {
            if (YearStats.ContainsKey(year))
            {
                foreach (var county in YearStats[year].CountyStatistics.Keys)
                {
                    allCounties.Add(county);
                }
            }
        }

        // Filter by text if provided
        if (!string.IsNullOrEmpty(FilterText))
        {
            return allCounties
                .Where(c => c.Contains(FilterText, StringComparison.OrdinalIgnoreCase))
                .OrderBy(c => c);
        }

        return allCounties.OrderBy(c => c);
    }

    private SpecializationStats GetSpecializationStats(int year, string specialization)
    {
        if (YearStats.ContainsKey(year) &&
            specialization != null &&
            YearStats[year].SpecializationStatistics.ContainsKey(specialization))
        {
            return YearStats[year].SpecializationStatistics[specialization];
        }

        return new SpecializationStats();
    }

    private CountyStats GetCountyStats(int year, string county)
    {
        if (YearStats.ContainsKey(year) &&
            county != null &&
            YearStats[year].CountyStatistics.ContainsKey(county))
        {
            return YearStats[year].CountyStatistics[county];
        }

        return new CountyStats();
    }
}