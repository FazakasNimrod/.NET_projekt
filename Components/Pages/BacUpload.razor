@page "/bac-upload"
@using projekt.Models
@using projekt.Services
@using Microsoft.AspNetCore.Components.Forms
@namespace projekt.Components.Pages
@inject IWebHostEnvironment Environment
@inject CsvService CsvService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Upload BAC Results</PageTitle>

<div class="container">
    <h1 class="mb-4">Upload New BAC Results</h1>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Upload CSV File</h5>
                </div>
                <div class="card-body">
                    <p>
                        Upload a CSV file containing BAC examination results.
                        The file should have the appropriate format with all required fields.
                    </p>

                    <div class="alert alert-info">
                        <strong>File Size:</strong> You can upload files up to 100 MB. Large files may take some time to process.
                    </div>

                    <div class="mb-3">
                        <label for="year-select" class="form-label">Select Year</label>
                        <select id="year-select" class="form-select" @bind="SelectedYear">
                            @for (int year = 2014; year <= DateTime.Now.Year; year++)
                            {
                                <option value="@year">@year</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Select CSV File</label>
                        <InputFile OnChange="OnFileSelected" class="form-control" accept=".csv" />

                        @if (SelectedFile != null)
                        {
                            <div class="mt-2 text-muted">
                                Selected file: @SelectedFile.Name (@FormatFileSize(SelectedFile.Size))
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(ValidationMessage))
                    {
                        <div class="alert @ValidationCssClass">
                            @ValidationMessage
                        </div>
                    }

                    <button class="btn btn-primary" @onclick="UploadFile" disabled="@(!IsFileSelected || IsUploading)">
                        @if (IsUploading)
                        {
                            <div class="d-flex align-items-center">
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Uploading large file... This may take a few minutes</span>
                            </div>
                        }
                        else
                        {
                            <span>Upload File</span>
                        }
                    </button>

                    @if (IsUploading)
                    {
                        <div class="mt-3">
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated"
                                     role="progressbar" style="width: 100%"></div>
                            </div>
                            <div class="mt-2 text-muted text-center">
                                <small>Please wait while the file is being uploaded and processed...</small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">CSV Format Guidelines</h5>
                </div>
                <div class="card-body">
                    <p>The CSV file should include the following columns:</p>

                    <ul class="list-group mb-3">
                        <li class="list-group-item">code - Unique identifier</li>
                        <li class="list-group-item">school - School short name</li>
                        <li class="list-group-item">county - County name</li>
                        <li class="list-group-item">previous_prom - Previous promotion (True/False)</li>
                        <li class="list-group-item">education_form - Form of education (Zi, Seral, etc.)</li>
                        <li class="list-group-item">specialization - Study specialization</li>
                        <li class="list-group-item">romanian_level - Romanian language level</li>
                        <li class="list-group-item">native_subject - Native language subject</li>
                        <li class="list-group-item">extra_language - Additional language studied</li>
                        <li class="list-group-item">avg - Final average grade</li>
                        <li class="list-group-item">passed - Whether the student passed (1) or failed (0)</li>
                        <li class="list-group-item">year - Examination year</li>
                        <li class="list-group-item">full_school_name - Complete school name</li>
                        <li class="list-group-item">... and other related fields</li>
                    </ul>

                    <p>
                        <strong>Example:</strong><br />
                        <small class="text-muted">
                            code,school,county,previous_prom,education_form,specialization,romanian_level,...
                        </small>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <h3>Available Data Files</h3>

        @if (IsLoading)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else if (!AvailableYears.Any())
        {
            <div class="alert alert-info">
                No data files have been uploaded yet.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Year</th>
                            <th>File</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var year in AvailableYears.OrderByDescending(y => y))
                        {
                            <tr>
                                <td>@year</td>
                                <td>@(year + "_final.csv")</td>
                                <td>
                                    <a href="/bac-results" class="btn btn-sm btn-primary">View Data</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private int SelectedYear { get; set; } = DateTime.Now.Year;
    private IBrowserFile? SelectedFile { get; set; }
    private bool IsFileSelected => SelectedFile != null;
    private bool IsUploading { get; set; } = false;
    private bool IsLoading { get; set; } = true;
    private string ValidationMessage { get; set; } = "";
    private string ValidationCssClass { get; set; } = "";
    private List<int> AvailableYears { get; set; } = new List<int>();

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB" };
        int suffixIndex = 0;
        double size = bytes;

        while (size > 1024 && suffixIndex < suffixes.Length - 1)
        {
            size /= 1024;
            suffixIndex++;
        }

        return $"{size:0.##} {suffixes[suffixIndex]}";
    }

    protected override async Task OnInitializedAsync()
    {
        AvailableYears = await CsvService.GetAvailableYearsAsync();
        IsLoading = false;
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        ValidationMessage = "";
    }

    private async Task UploadFile()
    {
        if (SelectedFile == null)
        {
            ValidationMessage = "Please select a file first.";
            ValidationCssClass = "alert-warning";
            return;
        }

        // Check file extension
        if (!SelectedFile.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
        {
            ValidationMessage = "Only CSV files are supported.";
            ValidationCssClass = "alert-danger";
            return;
        }

        // Check file size (max 100MB)
        if (SelectedFile.Size > 104857600)
        {
            ValidationMessage = "File size should not exceed 100MB.";
            ValidationCssClass = "alert-danger";
            return;
        }

        try
        {
            IsUploading = true;

            // Process and save the file
            bool success = await CsvImportHelper.ProcessUploadedCsvFile(SelectedFile, SelectedYear, Environment);

            // Add a delay to ensure file processing completes
            await Task.Delay(1000);

            // Check if the file was actually created
            string filePath = Path.Combine(Environment.WebRootPath, "data", $"{SelectedYear}_final.csv");
            bool fileExists = File.Exists(filePath);

            if (success || fileExists)
            {
                ValidationMessage = "File uploaded successfully!";
                ValidationCssClass = "alert-success";

                // Refresh available years
                AvailableYears = await CsvService.GetAvailableYearsAsync();

                // Clear selected file
                SelectedFile = null;
            }
            else
            {
                ValidationMessage = "Failed to process the file. Please check the format.";
                ValidationCssClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            ValidationMessage = $"An error occurred: {ex.Message}";
            ValidationCssClass = "alert-danger";
        }
        finally
        {
            IsUploading = false;
        }
    }
}